/* A binary tree node has data, pointer to left child
   and a pointer to right child 
struct Node
{
    int data;
    struct Node* left;
    struct Node* right;
    
    Node(int x){
        data = x;
        left = right = NULL;
    }
}; */

// Should return  right view of tree
class Solution
{
    public:
    //Function to return list containing elements of right view of binary tree.
    vector<int> rightView(Node *root)
    {
        vector<int> ans;
    if (root == NULL)
        return ans;
    
    queue<pair<Node*, int>> q;
    q.push({root, 0});
    
    while (!q.empty()) {
        int size = q.size();
        //level order traversal
        for (int i = 0; i < size; ++i) {
            pair<Node*, int> temp = q.front();
            q.pop();
            Node* frontNode = temp.first;
            int hd = temp.second;
            
            // Only add the first node encountered at each level to the result
            
            if (i == (size-1)) {
                ans.push_back(frontNode->data);
            }
            
            
            if (frontNode->left) {
                q.push({frontNode->left, hd - 1});
            }
            if (frontNode->right) {
                q.push({frontNode->right, hd + 1});
            }
           
        }
    }
    
    return ans;
    }
};
